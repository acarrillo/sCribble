      ____      _ _     _     _      
 ___ / ___|_ __(_) |__ | |__ | | ___
/ __| |   | '__| | '_ \| '_ \| |/ _ \
\__ \ |___| |  | | |_) | |_) | |  __/
|___/\____|_|  |_|_.__/|_.__/|_|\___|                                     
                                     The smart doodler

------------------------------------------------------
by Alejandro Carrillo, Doron Shapiro, and Vincent Zhen
------------------------------------------------------

<DW>
Approved
</DW>


WHAT ARE YOU?
    I am a collaborative doodle-pad. Combining the simplicity of MS Paint with the magic of networking, we can bring multiple clients together to work on a single screen.

HOW DO I USE YOU?
    Quite simply, just draw on the canvas and all of your edits will simultaneously propagate to all of your collaboratorsâ€™ canvases as well.  To create a new doodle, just run the program. You will be presented with your IP address that other users can use to "log in" to your doodle.  If you wish to join someone else's doodle, just pass their IP address as a command line argument when you start up.  Upon quitting, the final doodle will be saved on your computer as mypicture.bmp.

HOW DO YOU WORK?
    -The Doodling:
     The program runs on top of SDL, a framework that allows easy access to pixels in a buffer.  The window is divided into two areas: the canvas and the user interactions area.  Mouse events in the canvas are constantly recorded and sent off to the networking client, while buttons and sliders in the UI area define what tools are being used.  At the top of the UI area is a status bar, where messages from the server are displayed.  Each iteration of the main program loop, three things happen:
     First, information about the mouse and keyboard is collected.  Standard keyboard shortcuts for quitting are caught, and, when relevant, the mouse's coordinates and state are packaged into a struct called a cribblePacket.  Control is then passed to a networking client.  If a cribblePacket was filled, it is sent over TCP to a server.   At this time, a cribblePacket may also be received from the server.  Finally, the canvas takes control of the program, and uses drawing algorithms to modifies pixels on the screen based on the cribblePackets that have been received.
 
    -The Magic:
    Each "doodle" is hosted by a central server program (which runs alongside one client program).  The server/client distinction is not transparent to the user.
    The server has at least two processes at any given time.  The first process sets up the network connection and begins listening for clients.  When a client connects, its descriptor is added to an internal list of descriptors and a subserver is forked.  When the server is initialized, it also sets up a cribblePacket in shared memory with a semaphore attached.  Subservers, upon receiving further communications from their respective clients, wait for the semaphore to be in an open state.  When it is, they dump their cribblePackets in the memory, and move the semaphore to a central-server-only state.  The central server then writes the data to all of the clients on its list and opens up the semaphore again.

    
    TEAM MEMBER WORK BREAKDOWN:
        Networking- Doron
        Canvas Drawing- Alex
        UI- Alex
        Client logic- Vincent

WHEN WILL YOU BE READY?
    Week of the 1st:  Project code outlined
    Week of the 8th:  Working non-networked paint tools
    Week of the 15th: Working client-server relationships
    Week of the 22nd: Connect client/server code with paint tools
    Week of the 29th: Debugging/extra features (chat, mouse overlay, etc)